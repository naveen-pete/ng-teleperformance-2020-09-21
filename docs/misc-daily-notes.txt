Angular Notes
-------------

21-Sep-20
---------

What is Angular?
- UI Framework
- A front end development tool which provide us to create web application in component based
- JavaScript framework for building web apps
- JS Library - Framework
- It provides many feature like directive, component , services  ,forms ,pipe
- Used to create SPAs
- Open source and used in all web component
- Portable
- Its a javascript framework use to create independent client side web application
- It is faster then server side request as it not load already loaded script js again and again
- TypeScript based framework
- Supports Micro-frontends
- MVC Pattern

Why Angular?
- Dynamic nature on http page with live server
- For create single page application
- It have powerful feature and faster than other web application
- When we create traditional application it will request all links again and load all again  but angular request for needed one only 
- Two way binding
- It support typescript higher version of javascript i.e. ES6
- due one to one peer and broudcast is hard
- It permit to build complex, customized, modern, responsive and user-friendly
- jquery is library and angular is framework
- yes but loading time is less compare to it
- ajax handling


- The end-user only knows the url - https://www.amazon.in, but the browser issues multiple requests to the server internally.

-----------------------------------------------------------
22-Sep-20
---------
- Web page - static data + dynamic data

- Traditional Web app
  - ASP.NET - Server-side rendering
product-detail.html

<html>
<head>
</head>

<body>

  <div>
    Product information
  </div>

</body>
</html>

- SPA 
  - 1 web page - index.html - <script> / <link>
  - One or more bundles of static content
    - JS
    - CSS
    - images
    
  - subsequent http requests
    - JSON data - 
      {
        id: 1,
        name: 'Samsung Galaxy',
        price: 50000,
        desc: ''
      }
      
    - Client side rendering
  
MEAN Stack - JavaScript
- M - MongoDB
- E - Express
- A - Angular
- N - Node

- Presentation -     Angular

- Business Layer -   Node.js, Express - MS. C#NET - Asp.NET Web API | Java SpringBoot | PHP

- Data Layer     -   MongoDB          - MS SQL Server               | Oracle          | MySQL

- App Startup process (Bootstrapping)

Dev Env

  - TypeScript - is converted to - JavaScript (Transpilation)
  
  - Build

- Run Angular App
  - Angular CLI - internally makes use of a build tool - webpack
  - ng serve/build
    1. Compile TS code into JS code
    2. Bundle JS code
    3. Inject <script> tags for js files, CSS, images within index.html
    
    (dev)
    4. Start a web server - http://localhost:4200/
    5. Host the Angular app (JS app) in web server
    
    (prod)
    4. Creates a dist folder
    
- JS Module (ES6 - 2015)

  app.js
  
  products.js
  - export Product
  
  customers.js
  - export Customer
  
  orders.js
  - import Product, Customer
  
  
  payment.js
  
  shoppingcart.js

-----------------------------------------------------------
23-Sep-20
---------

1. class
2. function
3. variables - scalar, array, object

Amazon
  - AppModule
  - ProductModule - Components, Directives, Pipes, Services
  - CustomerModule
  - OrderModule
  - UserModule
  - ShoppingCart

Component
  - UI Code - html
  - Stylesheets - css
  - Data - TS - class - property - categories: [] array of category objects
  - Behavior - TS - class - method - searchProducts(searchText)
  
  - reusability
  
  
28-Sep-20
---------

Services
--------

1. ProductDetailComponent
  - name, price, image, seller, publisher, rating
  - code accessing REST url - https://amazon.in/api/products/101
  
2. OrdersComponent
  - name, price, image, seller, publisher, rating
  - code accessing REST url - https://amazon.in/api/products/201
  
3. ShoppingCartComponent
  - name, price, image, seller, publisher, rating
  - code accessing REST url - https://amazon.in/api/products/201

- Duplicating code
- SRP / separation of concerns
  
Service
- Non UI Code
- Common logic 

--------------------------
30-Sep-20

Async code in JS
1. Callback function - ES5
2. Promise - ES6
3. Async / Await - ES7

4. Observable - rxjs

--------------------------
03-Oct-20

Form Validations

1. Template Driven Forms - FormsModule - built-in validations
2. Reactive Forms - ReactiveFormsModule - custom validations - sync & async  


  



